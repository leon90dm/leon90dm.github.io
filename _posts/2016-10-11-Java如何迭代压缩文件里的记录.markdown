---
layout:     post
title:      "使用Java正确迭代压缩文件里的记录"
subtitle:   "使用Java正确迭代压缩文件里的记录(java.util.zip.ZipFile, java.util.zip.ZipInputStream)"
date:       2016-10-11
author:     "BilboDai"
header-img: "img/post-bg-os-metro.jpg"
catalog: true
tags:
    - Java
---

前言
---
JDK提供两种方式用于迭代Zip文件里的记录

- 使用ZipFile
- 使用ZipInputStream

使用ZipFile
---

```java
final ZipFile file = new ZipFile( FILE_NAME );
try
{
    final Enumeration<? extends ZipEntry> entries = file.entries();
    while ( entries.hasMoreElements() )
    {
        final ZipEntry entry = entries.nextElement();
        System.out.println( entry.getName() );
        //use entry input stream:
        readInputStream( file.getInputStream( entry ) )
    }
}
finally
{
    file.close();
}
    
private static int readInputStream( final InputStream is ) throws IOException {
    final byte[] buf = new byte[ 8192 ];
    int read = 0;
    int cntRead;
    while ( ( cntRead = is.read( buf, 0, buf.length ) ) >=0  )
    {
        read += cntRead;
    }
    return read;
}
```

使用ZipInputStream
---

```java
final ZipInputStream is = new ZipInputStream( new BufferedInputStream( new FileInputStream( FILE_NAME ) ) );
try
{
    ZipEntry entry;
    while ( ( entry = is.getNextEntry() ) != null )
    {
        System.out.println( entry.getName() );
        //use entry input stream:
        readInputStream( is )
    }
}
finally
{
    is.close();
}
```

ZipFile和ZipInputStream有什么区别
----
压缩文件一般都包含了两个及以上的文件记录，每个文件记录都有一个字段记录着当前记录的文件的大小，所以遍历所有的压缩的文件记录并不需要把文件进行解压缩。ZipFile即是这样，它可以在文件记录之间随机访问，而ZipInputStream则不能，它只能把文件进行解压缩之后一个一个文件进行迭代。

因此，如果你只是想获取压缩文件中某个文件的内容，那么使用ZipFile是合适的，而想要依次全部处理，那么使用ZipInputStream即可。

这里举个例子，一个压缩文件大小大概1.6GB，包含三个0.6GB文件记录，使用ZipFile迭代只需要0.05s，而使用ZipInputStream则需要18s。

其他 
---
Java6及以前是不支持任何文件超过2GB的，这里的文件指的是压缩之后总的压缩文件大小和未压缩前的任何文件记录。但Java7之后就支持了zip64。
