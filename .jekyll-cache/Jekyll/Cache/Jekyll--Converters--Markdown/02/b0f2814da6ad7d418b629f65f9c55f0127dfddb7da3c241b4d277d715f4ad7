I"$<h2 id="string-pooling">String pooling</h2>
<p>曾经Java6之前是不允许使用<code class="highlighter-rouge">String.intern()</code>，因为很可能使用不当就会造成<code class="highlighter-rouge">OutOfMemoryException</code>.然后Java7之后这个问题得到了官方的解决。</p>

<p>Java6之前，所有<code class="highlighter-rouge">interned</code>的字符串都被存储在<code class="highlighter-rouge">PermGen</code>（永久区），永久带必须设置一个固定的大小，并且一旦虚拟机启动，则大小不可更改。一般情况下，永久区大小设置<code class="highlighter-rouge">-XX:MaxPermSize=N </code>在32M到96M之间。</p>

<p>Java7之后，这个情况变了，<code class="highlighter-rouge">interned</code>的字符串有被重新分配堆上。准确的说是一个叫做<code class="highlighter-rouge">String Pool</code>的地方。Java6及以前这个<code class="highlighter-rouge">Pool</code>在永久区，而Java7之后被安放在了堆当中。</p>

<p><code class="highlighter-rouge">String Pool</code>是用<code class="highlighter-rouge">HashMap</code>来实现的,每个槽是一个包含了相同<code class="highlighter-rouge">Hash Code</code>的字符串列表，默认槽的初始大小为1009，在java6及以前这个大小是不可以调整的，java7之后这个参数可以通过<code class="highlighter-rouge">-XX:StringTableSize=N</code>来调整，注意<code class="highlighter-rouge">N</code>最好是一个<strong>素数</strong>，以便获得更好的性能。</p>

<p><strong>提示：</strong>如果你要使用<code class="highlighter-rouge">String.intern()</code>方法的话，你应该设置一个更高的<code class="highlighter-rouge">-XX:StringTableSize</code>值（相比默认的1009），否则性能会急剧下降。</p>

<p>那么我们应该构建一个手工的String Pool么？</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">WeakHashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">WeakReference</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">s_manualCache</span> <span class="o">=</span>
    <span class="k">new</span> <span class="nc">WeakHashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">WeakReference</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;(</span> <span class="mi">100000</span> <span class="o">);</span>
 
<span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">manualIntern</span><span class="o">(</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">str</span> <span class="o">)</span>
<span class="o">{</span>
    <span class="kd">final</span> <span class="nc">WeakReference</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">cached</span> <span class="o">=</span> <span class="n">s_manualCache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">str</span> <span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span> <span class="n">cached</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span>
    <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">cached</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">value</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span>
            <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="n">s_manualCache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span> <span class="n">str</span><span class="o">,</span> <span class="k">new</span> <span class="nc">WeakReference</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;(</span> <span class="n">str</span> <span class="o">)</span> <span class="o">);</span>
    <span class="k">return</span> <span class="n">str</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>答案是没必要的，因为从测试的性能来看，相差不大。</p>

<p>从Java7u40之后，<code class="highlighter-rouge">String Pool</code>大小改为了60013，这个值能够在出现冲突前包含大概30000个不同的字符串。</p>

<h2 id="总结">总结</h2>
<ul>
  <li>Java6及以前最好不要使用<code class="highlighter-rouge">String.intern()</code></li>
  <li>Java7以后的实现是将<code class="highlighter-rouge">String Pool</code>放在了堆上，这样你可以通过<code class="highlighter-rouge">-XX:StringTableSize</code>适当调整它的大小。</li>
  <li>使用<code class="highlighter-rouge">-XX:+PrintStringTableStatistics</code>来打印<code class="highlighter-rouge">String.intern()</code>相关的信息</li>
</ul>
:ET