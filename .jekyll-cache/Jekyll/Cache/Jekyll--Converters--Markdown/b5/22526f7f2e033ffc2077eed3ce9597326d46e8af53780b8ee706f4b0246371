I"`<h2 id="概述">概述</h2>
<p>HashCode主要的作用就是为了让一个对象作为HashMap或者HashSet里的一个键。因此对象应该实现<code class="highlighter-rouge">equals(Object)</code>和<code class="highlighter-rouge">hashCode</code>方法。</p>

<ul>
  <li>如果a.equals(b)那么a.hashCode() == b.hashCode()</li>
  <li>如果hashCode()在同一个对象上调用两次，如果对象没有发生变化，那么结果应该是一样的。</li>
</ul>

<p>从性能的角度来讲，hashCode的实现的主要考量就是减少共享同一个hash code的对象的数量，也就说要减少哈希冲突的概率。另一方面，如果所有的对象都共享同一个hashcode，那么HashMap或者HashSet的性能将降低成O(n^2)的复杂度。</p>

<h2 id="哈希冲突">哈希冲突</h2>
<p>随机哈希一个很大键的集合的子集出现哈希冲突是不可避免的。例如2,450个键被哈希到1,000,000个槽，即使使用<code class="highlighter-rouge">perfectly uniform random distribution</code>，也会有95%的概率2个键被哈希到同一个槽中。</p>

<h4 id="separate-chaining">Separate chaining</h4>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/Hash_table_5_0_1_1_1_1_1_LL.svg/900px-Hash_table_5_0_1_1_1_1_1_LL.svg.png" alt="" />
效率=找到槽（常数时间）+列表遍历（O(n))
一个好的Hash表每个槽应该是空的或者一个元素，偶尔有2到3个，但很少高于3个。</p>

<ul>
  <li>Separate chaining with linked lists</li>
  <li>Separate chaining with list head cells</li>
</ul>

<h4 id="open-addressing"><a href="https://en.wikipedia.org/wiki/Open_addressing">Open addressing</a></h4>
<p><strong>Open addressing</strong>又被称为<strong>closed hashing</strong> Java使用的是<strong>Open addressing</strong>所有的记录都被存储在槽中，如果一个新的记录插入之后，那么槽会被校验，从那个槽开始，执行一个探测序列，知道发现 一个没有被占用的槽。检索的时候也是一样，槽都会用相同的探测序列进行扫描知道找到了记录或者找到一个没有被占用的槽（没有找到记录）。</p>

<ul>
  <li>Linear probing</li>
  <li>Quadratic probing</li>
  <li>Double hashing</li>
</ul>

<h4 id="autogenerated-hashcode-for-long-fields">Autogenerated hashCode for long fields</h4>
<p>如果把long的高32位和低32位分别取出来做为两个int值进行计算出来的哈希值会更好。如：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public int hashCode() {
    int result = (int) val1;
    result = 31 * result + (int) (val1 &gt;&gt;&gt; 32);
    result = 31 * result + (int) val2;
    return 31 * result + (int) (val2 &gt;&gt;&gt; 32);
}
</code></pre></div></div>

<p>虽然hashCode()方法的执行会稍微慢些，但是在哈希集合上使用时效率会更高。</p>
:ET